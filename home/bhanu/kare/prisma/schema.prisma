// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Daycare {
  id     String @id @default(cuid())
  name   String
  status DaycareStatus @default(PENDING)
  plan   String @default("Basic") // e.g., "Basic", "Premium", "Enterprise"
  location String?

  owner   User?
  staff   Staff[]
  children Child[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?

  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model Child {
  id              String  @id @default(cuid())
  name            String
  dateOfBirth     DateTime
  gender          String?
  startDate       DateTime
  status          ChildStatus
  program         String // e.g., 'Infant (0-12months)', 'Toddler (1 to 3 years)'
  programType     String // e.g., 'Full time', 'Part time'
  
  // Parent/Guardian Info
  motherName      String
  motherEmail     String?
  fatherName      String
  fatherEmail     String?
  homePhone       String?
  mobilePhone     String
  address         String

  // Emergency Contact
  emergencyName   String
  emergencyPhone  String

  // Health Information
  vaccination     String?
  allergies       String?
  notes           String?
  
  // App-specific fields
  photoUrl        String?
  photoHint       String

  // Relations
  daycareId       String
  daycare         Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Staff {
  id              String  @id @default(cuid())
  name            String
  role            String
  startDate       DateTime
  status          StaffStatus

  phone           String
  address         String
  
  // Emergency Contact
  emergencyName   String
  emergencyPhone  String

  // Compensation
  payType         String // "Hourly" or "Salary"
  payRate         Float

  // Additional Info
  certifications  String?
  notes           String?
  
  // App-specific fields
  photoUrl        String?
  photoHint       String

  // Relations
  daycareId       String
  daycare         Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum DaycareStatus {
  PENDING
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ChildStatus {
  Active
  Inactive
  Waitlisted
}

enum StaffStatus {
  Active
  Inactive
  Archived
}
