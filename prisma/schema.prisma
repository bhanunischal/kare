// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// SaaS Admin Models
model SaaSAdmin {
  id       String @id @default(cuid())
  email    String @unique
  name     String
  password String
}

// Daycare Models
model Daycare {
  id                String @id @default(cuid())
  name              String
  status            String @default("PENDING") // Was DaycareStatus enum
  plan              String @default("BASIC")   // Was SubscriptionPlan enum
  joinDate          DateTime @default(now())
  contactEmail      String   @unique
  contactPhone      String?
  address           String?
  licenseNumber     String?  @unique
  logoUrl           String?
  bannerUrl         String?
  infantCapacity    Int?
  toddlerCapacity   Int?
  preschoolCapacity Int?
  gradeschoolerCapacity Int?
  
  // Relations
  children           Child[]
  staffMembers       StaffMember[]
  invoices           Invoice[]
  activities         Activity[]
  announcements      Announcement[]
  sharedDocuments    SharedDocument[]
  galleryPhotos      GalleryPhoto[]
  expenses           Expense[]
  reportTemplates    TemplateAssignment[]
  cloudStorageConfig CloudStorageConfig?
}

model CloudStorageConfig {
  id          String   @id @default(cuid())
  provider    String   // e.g., 'google-drive', 'aws-s3'
  credentials String   // Store encrypted credentials as a JSON string
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId   String   @unique
}

model ReportTemplate {
  id          String    @id @default(cuid())
  name        String
  description String?
  content     String?   // JSON content of the template stored as a string
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  daycares    TemplateAssignment[]
}

model TemplateAssignment {
  daycareId    String
  templateId   String
  assignedAt   DateTime @default(now())
  
  daycare      Daycare      @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  template     ReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@id([daycareId, templateId])
}


// Child-related Models
model Child {
  id             String      @id @default(cuid())
  name           String
  dob            DateTime
  startDate      DateTime
  status         String      // Was ChildStatus enum
  program        String      // Was Program enum
  programType    String      // Was ProgramType enum
  photoUrl       String?
  vaccinationInfo String?
  allergies      String?
  notes          String?
  
  // Relations
  daycare        Daycare       @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId      String
  guardians      Guardian[]
  attendance     AttendanceRecord[]
  assessments    Assessment[]
  emergencyContacts EmergencyContact[]
}

model Guardian {
  id          String  @id @default(cuid())
  name        String
  relationship String // e.g., Mother, Father, Guardian
  phone       String
  email       String?
  address     String?

  // Relations
  child       Child   @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId     String
}

model EmergencyContact {
  id           String @id @default(cuid())
  name         String
  relationship String
  phone        String

  // Relations
  child        Child  @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId      String
}


model AttendanceRecord {
  id          String           @id @default(cuid())
  date        DateTime         @db.Date
  checkIn     DateTime?
  checkOut    DateTime?
  status      String           // Was AttendanceStatus enum
  leaveReason String?
  leaveFrom   DateTime?        @db.Date
  leaveTo     DateTime?        @db.Date

  // Relations
  child       Child   @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId     String
  daycare     Daycare @relation(fields: [daycareId], references: [id])
  daycareId   String
  
  @@index([daycareId, date])
}

model Assessment {
  id               String   @id @default(cuid())
  reportingPeriod  String
  observations     String
  generatedReport  String   // The full AI-generated report JSON
  createdAt        DateTime @default(now())

  // Relations
  child            Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId          String
  daycare          Daycare  @relation(fields: [daycareId], references: [id])
  daycareId        String
}


// Staff-related Models
model StaffMember {
  id             String   @id @default(cuid())
  name           String
  role           String   // Was Role enum
  status         String   // Was StaffStatus enum
  startDate      DateTime @db.Date
  phone          String
  address        String
  photoUrl       String?
  certifications String?
  notes          String?
  payType        String   // Was PayType enum
  payRate        Float

  // Relations
  daycare        Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId      String
  emergencyContact EmergencyContactStaff?
}

model EmergencyContactStaff {
  id           String      @id @default(cuid())
  name         String
  relationship String
  phone        String
  staffMember  StaffMember @relation(fields: [staffMemberId], references: [id], onDelete: Cascade)
  staffMemberId String     @unique
}


// Operations Models
model Activity {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  time        String   // e.g., "10:00 AM"
  title       String
  category    String   // Was ActivityCategory enum
  description String?
  materials   String?
  domains     String?  // Was LearningDomain enum array, now a comma-separated string

  // Relations
  daycare     Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId   String
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())

  // Relations
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
}

model Invoice {
  id        String        @id @default(cuid())
  childName String
  parentName String
  amount    Float
  dueDate   DateTime      @db.Date
  status    String        // Was InvoiceStatus enum
  program   String

  // Relations
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
}

model Expense {
  id          String         @id @default(cuid())
  date        DateTime       @db.Date
  category    String         // Was ExpenseCategory enum
  description String
  amount      Float
  vendor      String?

  // Relations
  daycare     Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId   String
}

model SharedDocument {
  id          String   @id @default(cuid())
  name        String
  fileUrl     String
  type        String   // Was SharedDocumentType enum
  size        String   // e.g., "1.2 MB"
  dateAdded   DateTime @default(now())
  
  // Relations
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId   String
}

model GalleryPhoto {
  id          String   @id @default(cuid())
  imageUrl    String
  altText     String?
  dateAdded   DateTime @default(now())
  
  // Relations
  daycare     Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId   String
}
