
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Daycare {
  id                    String   @id @default(cuid())
  name                  String
  plan                  String
  address               String?
  status                DaycareStatus @default(PENDING)
  licenseNumber         String?
  contactEmail          String?
  contactPhone          String?
  infantCapacity        Int      @default(0)
  toddlerCapacity       Int      @default(0)
  preschoolCapacity     Int      @default(0)
  gradeschoolerCapacity Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  users                 User[]
  children              Child[]
  staff                 Staff[]
  activities            Activity[]
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  daycareId     String
  daycare       Daycare   @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Child {
  id             String      @id @default(cuid())
  name           String
  dateOfBirth    DateTime
  gender         String?
  startDate      DateTime
  program        String
  programType    String
  status         ChildStatus @default(Active)
  photoUrl       String?
  photoHint      String?
  motherName     String
  motherEmail    String?
  fatherName     String
  fatherEmail    String?
  mobilePhone    String
  address        String
  emergencyName  String
  emergencyPhone String
  vaccination    String?
  allergies      String?
  notes          String?
  daycareId      String
  daycare        Daycare     @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Staff {
  id             String      @id @default(cuid())
  name           String
  role           String
  startDate      DateTime
  phone          String
  address        String
  emergencyName  String
  emergencyPhone String
  payType        String
  payRate        Float
  status         StaffStatus @default(Active)
  photoUrl       String?
  photoHint      String?
  certifications String?
  notes          String?
  daycareId      String
  daycare        Daycare     @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  date        DateTime
  time        String
  category    String
  description String?
  materials   String?
  domains     String[]
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum DaycareStatus {
  PENDING
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ChildStatus {
  Active
  Waitlisted
  Inactive
}

enum StaffStatus {
  Active
  Inactive
  Archived
}
