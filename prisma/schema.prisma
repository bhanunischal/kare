// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Daycare {
  id                    String    @id @default(cuid())
  name                  String
  status                DaycareStatus @default(PENDING)
  plan                  String
  address               String?
  contactEmail          String?
  contactPhone          String?
  licenseNumber         String?
  storageProvider       String?   /// Name of the connected storage provider, e.g., 'google-drive'
  infantCapacity        Int       @default(0)
  toddlerCapacity       Int       @default(0)
  preschoolCapacity     Int       @default(0)
  gradeschoolerCapacity Int       @default(0)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  users    User[]
  children Child[]
  staff    Staff[]
  activities Activity[]

  @@map("daycares")
}

enum DaycareStatus {
  PENDING
  ACTIVE
  INACTIVE
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  
  daycareId     String
  daycare       Daycare   @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}


model Child {
  id                String      @id @default(cuid())
  name              String
  dateOfBirth       DateTime
  gender            String?
  startDate         DateTime
  status            ChildStatus @default(Active)
  program           String
  programType       String
  photoUrl          String?
  photoHint         String?

  // Parent/Guardian Info
  motherName        String
  motherEmail       String?
  fatherName        String
  fatherEmail       String?
  mobilePhone       String
  address           String

  // Emergency Contact
  emergencyName     String
  emergencyPhone    String

  // Health Info
  vaccination       String?
  allergies         String?
  notes             String?

  daycareId         String
  daycare           Daycare     @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("children")
}

enum ChildStatus {
  Active
  Waitlisted
  Inactive
}

model Staff {
  id               String   @id @default(cuid())
  name             String
  role             String
  startDate        DateTime
  status           String   @default("Active") // e.g., Active, Inactive, Archived
  phone            String
  address          String
  emergencyName    String
  emergencyPhone   String
  photoUrl         String?
  photoHint        String?
  
  // Compensation
  payType          String // e.g., Hourly, Salary
  payRate          Float

  // Certifications & Notes
  certifications   String?
  notes            String?

  daycareId        String
  daycare          Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("staff")
}

model Activity {
  id          String   @id @default(cuid())
  date        DateTime
  time        String
  title       String
  category    String
  description String?
  materials   String?
  domains     String[]

  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("activities")
}
