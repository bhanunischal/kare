// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// SAAS ADMIN MODELS
// ==========================================

model SaaSAdmin {
  id           String @id @default(cuid())
  email        String @unique
  name         String
  passwordHash String
}

model ReportTemplate {
  id          String               @id @default(cuid())
  name        String
  description String
  content     String // Storing template structure as a string (e.g., JSON)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  assignments TemplateAssignment[]
}

// Join table for assigning templates to daycares
model TemplateAssignment {
  template   ReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
  daycare    Daycare        @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId  String

  @@id([templateId, daycareId])
}


// ==========================================
// DAYCARE-SPECIFIC (TENANT) MODELS
// ==========================================

model Daycare {
  id                String               @id @default(cuid())
  name              String
  status            DaycareStatus        @default(Pending)
  plan              SubscriptionPlan     @default(Basic)
  location          String
  joinDate          DateTime             @default(now())
  licenseNumber     String?
  contactEmail      String?
  contactPhone      String?
  address           String?
  logoUrl           String?
  bannerUrl         String?
  storageProvider   String? // e.g., 'google-drive', 'aws-s3'

  // Relationships
  children          Child[]
  staff             StaffMember[]
  invoices          BillingInvoice[]
  expenses          FinancialExpense[]
  documents         SharedDocument[]
  galleryItems      GalleryItem[]
  activities        DaycareActivity[]
  assessments       ChildAssessment[]
  announcements     GeneralAnnouncement[]
  directMessages    ParentMessage[]
  guardians         Guardian[]
  templateAssignments TemplateAssignment[]
}

enum DaycareStatus {
  Active
  Inactive
  Pending
  Archived
}

enum SubscriptionPlan {
  Basic
  Premium
  Enterprise
}

// Child and Parent Models
model Child {
  id              String            @id @default(cuid())
  name            String
  dob             DateTime
  startDate       DateTime
  status          ChildStatus
  program         Program
  programType     ProgramType
  photoUrl        String?
  allergies       String?
  notes           String?
  vaccinationInfo String?
  daycare         Daycare           @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId       String
  parents         Guardian[]
  assessments     ChildAssessment[]
  attendance      AttendanceRecord[]
}

model Guardian {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  passwordHash String? // For potential parent portal login
  phone        String
  daycare      Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId    String
  children     Child[]
}

enum ChildStatus {
  Active
  Waitlisted
  Inactive
}

enum Program {
  Infant
  Toddler
  Preschool
  Gradeschooler
}

enum ProgramType {
  FullTime
  PartTime
  AdHoc
}

// Attendance and Activity Models
model AttendanceRecord {
  id          String           @id @default(cuid())
  date        DateTime
  status      AttendanceStatus
  checkIn     DateTime?
  checkOut    DateTime?
  leaveReason String?
  leaveType   LeaveType?
  child       Child            @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId     String
}

enum AttendanceStatus {
  Present
  Absent
  OnLeave
  Pending
}

enum LeaveType {
  Daily
  ShortTerm
  LongTerm
}

model DaycareActivity {
  id          String   @id @default(cuid())
  date        DateTime
  time        String
  title       String
  category    String
  description String?
  materials   String?
  domains     String? // Comma-separated LearningDomain values
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId   String
}

enum LearningDomain {
  Cognitive
  FineMotor
  GrossMotor
  SocialEmotional
  Language
}

// Assessment Model
model ChildAssessment {
  id                     String   @id @default(cuid())
  reportingPeriod        String
  observations           String
  socialEmotional        String
  cognitiveSkills        String
  languageCommunication  String
  motorSkills            String
  summaryRecommendations String
  createdAt              DateTime @default(now())
  child                  Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId                String
  daycare                Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId              String
}

// Staff Model
model StaffMember {
  id              String      @id @default(cuid())
  name            String
  role            StaffRole
  status          StaffStatus
  startDate       DateTime
  phone           String
  address         String
  emergencyName   String
  emergencyPhone  String
  payType         StaffPayType
  payRate         Float
  certifications  String?
  notes           String?
  photoUrl        String?
  daycare         Daycare     @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId       String
}

enum StaffRole {
  LeadECE
  Assistant
  ECEIT
  SupportStaff
}

enum StaffStatus {
  Active
  OnLeave
  Inactive
}

enum StaffPayType {
  MonthlySalary
  HourlyRate
}

// Billing and Expense Models
model BillingInvoice {
  id        String        @id @default(cuid())
  amount    Float
  dueDate   DateTime
  status    InvoiceStatus
  daycare   Daycare       @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
}

enum InvoiceStatus {
  Paid
  Due
  Overdue
}

model FinancialExpense {
  id          String          @id @default(cuid())
  date        DateTime
  category    ExpenseCategory
  description String
  amount      Float
  vendor      String?
  daycare     Daycare         @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId   String
}

enum ExpenseCategory {
  Supplies
  Utilities
  Rent
  Salaries
  Food
  Maintenance
  Other
}

// Document and Gallery Models
model SharedDocument {
  id        String             @id @default(cuid())
  name      String
  type      SharedDocumentType
  url       String
  size      String
  dateAdded DateTime           @default(now())
  daycare   Daycare            @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
}

enum SharedDocumentType {
  PDF
  Word
  Image
  Other
}

model GalleryItem {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  dateAdded DateTime @default(now())
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
}

// Communication Models
model GeneralAnnouncement {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
}

model ParentMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
  // Add relation to parent/guardian and child
}
