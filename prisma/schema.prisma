// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "preview-dart"
}

// ==================================
//         SaaS Admin Models
// ==================================

model SaaSAdmin {
  id       String @id @default(cuid())
  email    String @unique
  name     String
  password String // Hashed password
}

model ReportTemplate {
  id           String               @id @default(cuid())
  name         String
  description  String?
  content      String? // Storing template structure as a stringified JSON
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  assignments  TemplateAssignment[]
}

model TemplateAssignment {
  templateId String
  daycareId  String
  assignedAt DateTime @default(now())
  template   ReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  daycare    Daycare        @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  @@id([templateId, daycareId])
}


// ==================================
//         Daycare-Specific Models
// ==================================

model Daycare {
  id            String    @id @default(cuid())
  name          String
  licenseNumber String?
  email         String    @unique
  phone         String?
  address       String?
  logoUrl       String?
  bannerUrl     String?
  status        DaycareStatus @default(PENDING)
  plan          PlanType  @default(BASIC)
  joinDate      DateTime  @default(now())
  
  infantCapacity      Int @default(0)
  toddlerCapacity     Int @default(0)
  preschoolCapacity   Int @default(0)
  gradeschoolerCapacity Int @default(0)

  // Relations
  children      Child[]
  staff         StaffMember[]
  invoices      Invoice[]
  expenses      Expense[]
  documents     Document[]
  galleryPhotos GalleryPhoto[]
  activities    Activity[]
  announcements Announcement[]
  directMessages DirectMessage[]
  templates     TemplateAssignment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id        String      @id @default(cuid())
  daycareId String
  daycare   Daycare     @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  name           String
  photoUrl       String?
  dob            DateTime
  startDate      DateTime
  status         ChildStatus
  program        Program
  programType    ProgramType

  // Parent/Guardian Info
  motherName String
  fatherName String
  homePhone  String?
  mobilePhone String
  address    String

  // Emergency Contact
  emergencyName  String
  emergencyPhone String

  // Health Info
  vaccination String?
  allergies   String?
  notes       String?

  // Relations
  attendanceRecords AttendanceRecord[]
  invoices          Invoice[]
  assessments       Assessment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffMember {
  id        String   @id @default(cuid())
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  name         String
  photoUrl     String?
  role         Role
  status       StaffStatus
  startDate    DateTime
  phone        String
  address      String
  payType      PayType
  payRate      Float
  
  // Emergency Contact
  emergencyName  String
  emergencyPhone String

  // Qualifications
  certifications String?
  notes          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendanceRecord {
  id        String      @id @default(cuid())
  childId   String
  child     Child       @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  date      DateTime
  checkIn   DateTime?
  checkOut  DateTime?
  status    AttendanceStatus
  
  leaveReason String?
  leaveFrom   DateTime?
  leaveTo     DateTime?
  leaveType   LeaveType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id        String        @id @default(cuid())
  daycareId String
  daycare   Daycare       @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  childId   String
  child     Child         @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  amount    Float
  dueDate   DateTime
  status    InvoiceStatus
  program   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id          String   @id @default(cuid())
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  date        DateTime
  category    ExpenseCategory
  description String
  amount      Float
  vendor      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id        String   @id @default(cuid())
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  name      String
  fileUrl   String
  type      String   // e.g., 'PDF', 'Word', 'Image'
  size      String   // e.g., '1.2 MB'
  
  createdAt DateTime @default(now())
}

model GalleryPhoto {
  id        String   @id @default(cuid())
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  imageUrl  String
  altText   String?
  
  createdAt DateTime @default(now())
}

model Activity {
  id          String   @id @default(cuid())
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  date        DateTime
  time        String
  title       String
  category    ActivityCategory
  description String?
  materials   String?
  domains     String? // Comma-separated list of LearningDomain enums

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assessment {
  id             String   @id @default(cuid())
  childId        String
  child          Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  reportingPeriod      String
  socialEmotional      String
  cognitiveSkills      String
  languageCommunication String
  motorSkills          String
  summaryRecommendations String

  generatedAt DateTime @default(now())
}

model Announcement {
  id        String   @id @default(cuid())
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  title     String
  content   String
  
  createdAt DateTime @default(now())
}

model DirectMessage {
  id        String   @id @default(cuid())
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  childId   String // The child this message is about
  content   String
  
  sentBy    String // Could be 'Staff' or 'Parent'
  
  createdAt DateTime @default(now())
}


// ==================================
//         Enums
// ==================================

enum DaycareStatus {
  ACTIVE
  INACTIVE
  PENDING
  ARCHIVED
}

enum PlanType {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum ChildStatus {
  ACTIVE
  WAITLISTED
  INACTIVE
}

enum StaffStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum Role {
  LEAD_ECE
  ASSISTANT
  ECE_IT
  SUPPORT_STAFF
}

enum Program {
  INFANT
  TODDLER
  PRESCHOOL
  GRADESCHOOLER
}

enum ProgramType {
  FULL_TIME
  PART_TIME
  ADHOC
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  ON_LEAVE
  PENDING
}

enum LeaveType {
  DAILY
  SHORT_TERM
  LONG_TERM
}

enum InvoiceStatus {
  PAID
  DUE
  OVERDUE
}

enum ExpenseCategory {
  SUPPLIES
  UTILITIES
  RENT
  SALARIES
  FOOD
  MAINTENANCE
  OTHER
}

enum ActivityCategory {
  ART_AND_CRAFT
  MUSIC_AND_MOVEMENT
  OUTDOOR_PLAY
  STORY_TIME
  SCIENCE_AND_DISCOVERY
}
