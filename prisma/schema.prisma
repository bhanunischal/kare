// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------
// AUTH & ADMIN MODELS
// -------------------

model SaaSAdmin {
  id       String @id @default(cuid())
  email    String @unique
  name     String
  password String // Hashed password
}

model Daycare {
  id              String   @id @default(cuid())
  name            String
  licenseNumber   String?
  address         String?
  contactEmail    String   @unique
  contactPhone    String?
  logoUrl         String?
  bannerUrl       String?
  status          String   @default("Pending") // e.g., Pending, Active, Inactive
  plan            String   @default("Basic") // e.g., Basic, Premium, Enterprise
  storageProvider String? // e.g., google-drive, aws-s3
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Capacities
  infantCapacity      Int @default(0)
  toddlerCapacity     Int @default(0)
  preschoolCapacity   Int @default(0)
  gradeschoolerCapacity Int @default(0)

  // Relations
  guardians         Guardian[]
  children          Child[]
  staff             StaffMember[]
  activities        Activity[]
  invoices          Invoice[]
  expenses          Expense[]
  sharedDocuments   SharedDocument[]
  reportTemplates   TemplateAssignment[]
  announcements     Announcement[]
}

// -------------------
// DAYCARE-SPECIFIC MODELS
// -------------------

model Guardian {
  id          String   @id @default(cuid())
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  email       String
  firstName   String
  lastName    String
  phone       String
  address     String
  
  // Relations
  children    Child[]
  
  @@unique([daycareId, email])
}

model Child {
  id             String   @id @default(cuid())
  daycareId      String
  daycare        Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  name           String
  dob            DateTime
  startDate      DateTime
  photoUrl       String?
  status         String   // Active, Waitlisted, Inactive
  program        String   // Infant, Toddler, etc.
  programType    String   // Full time, Part time
  
  // Health Info
  allergies      String?
  vaccinationInfo String?
  notes          String?

  // Relations
  guardians      Guardian[]
  attendance     AttendanceRecord[]
  invoices       Invoice[]
}

model StaffMember {
  id             String   @id @default(cuid())
  daycareId      String
  daycare        Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  name           String
  role           String   // Lead ECE, Assistant, etc.
  email          String   @unique
  phone          String
  address        String
  startDate      DateTime
  status         String   // Active, On Leave, Inactive
  photoUrl       String?

  // Financial Info
  payType        String   // Monthly Salary, Hourly Rate
  payRate        Float

  // Emergency Contact
  emergencyContactName  String
  emergencyContactPhone String

  // Qualifications
  certifications String?
  notes          String?
}

model AttendanceRecord {
  id        String   @id @default(cuid())
  childId   String
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  status    String   // Present, Absent, On Leave
  checkIn   DateTime?
  checkOut  DateTime?
  leaveReason String?
  leaveType String? // Daily, Short-term, Long-term
  
  @@unique([childId, date])
}

model Activity {
  id          String   @id @default(cuid())
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  date        DateTime @db.Date
  time        String   // e.g., "10:00 AM"
  title       String
  category    String   // Art & Craft, Music & Movement, etc.
  description String?
  materials   String?
  domains     String?  // Comma-separated list of domains like "Cognitive,Fine Motor"
}

model SharedDocument {
  id          String   @id @default(cuid())
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  name        String
  type        String   // PDF, Word, Image
  url         String
  size        Float    // Size in KB
  dateAdded   DateTime @default(now())
}

model Announcement {
  id          String   @id @default(cuid())
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  title       String
  content     String
  createdAt   DateTime @default(now())
  isBroadcast Boolean  @default(true) // True for all, false for direct
  childId     String?  // For direct messages to a specific child's parents
}


// -------------------
// TEMPLATE & BILLING MODELS
// -------------------

model ReportTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  content     String   // The JSON structure of the template
  isGlobal    Boolean  @default(true) // True for templates created by SaaS Admin
  
  // Relations
  daycares    TemplateAssignment[]
}

model TemplateAssignment {
  reportTemplateId String
  daycareId        String
  assignedAt       DateTime @default(now())
  assignedBy       String   // Could be SaaSAdmin ID

  reportTemplate ReportTemplate @relation(fields: [reportTemplateId], references: [id], onDelete: Cascade)
  daycare        Daycare        @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  @@id([reportTemplateId, daycareId])
}

model Invoice {
  id        String   @id @default(cuid())
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  childId   String
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  amount    Float
  dueDate   DateTime @db.Date
  status    String   // Paid, Due, Overdue
  createdAt DateTime @default(now())
}

model Expense {
  id          String   @id @default(cuid())
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  date        DateTime @db.Date
  category    String   // Supplies, Utilities, etc.
  description String
  amount      Float
  vendor      String?
  createdAt   DateTime @default(now())
}
