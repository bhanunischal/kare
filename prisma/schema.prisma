// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Comprehensive schema for the Child Care Ops SaaS platform.
// It is designed with a multi-tenant architecture to ensure data isolation
// between different daycare centers. The `Daycare` model is central,
// and most other models are linked to it via a `daycareId`.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums for data consistency based on application types
enum DaycareStatus {
  Active
  Inactive
  Pending
  Archived
}

enum Plan {
  Basic
  Premium
  Enterprise
}

enum ChildStatus {
  Active
  Waitlisted
  Inactive
}

enum StaffStatus {
  Active
  On_Leave
  Inactive
}

enum InvoiceStatus {
  Paid
  Due
  Overdue
}

// -- CORE SAAS & TENANT MODELS --

// Model for the SaaS administrators who manage the platform.
model SaaSAdmin {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Central model for each daycare tenant. This is the cornerstone of the multi-tenant architecture.
model Daycare {
  id                String        @id @default(cuid())
  name              String
  status            DaycareStatus @default(Pending)
  plan              Plan          @default(Basic)
  location          String
  joinDate          DateTime
  logoUrl           String?
  bannerUrl         String?
  licenseNumber     String?
  contactEmail      String?
  contactPhone      String?
  address           String?

  // Program capacities
  infantCapacity        Int @default(0)
  toddlerCapacity       Int @default(0)
  preschoolCapacity     Int @default(0)
  gradeschoolerCapacity Int @default(0)

  // Relations to all tenant-specific data
  staffMembers      StaffMember[]
  children          Child[]
  activities        Activity[]
  expenses          Expense[]
  documents         Document[]
  galleryPhotos     GalleryPhoto[]
  announcements     Announcement[]
  templateAssignments TemplateAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -- DAYCARE-SPECIFIC MODELS --

// Staff members associated with a specific daycare.
model StaffMember {
  id             String      @id @default(cuid())
  daycare        Daycare     @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId      String
  email          String // Used for login for this daycare
  hashedPassword String
  name           String
  photoUrl       String?
  role           String // e.g., 'Lead ECE', 'Assistant'
  status         StaffStatus @default(Active)
  startDate      DateTime
  phone          String
  address        String
  emergencyName  String
  emergencyPhone String
  payType        String // e.g., 'Monthly Salary', 'Hourly Rate'
  payRate        Float
  certifications String?
  notes          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([daycareId, email]) // Staff email must be unique within a daycare
}

// Children enrolled or waitlisted at a specific daycare.
model Child {
  id             String      @id @default(cuid())
  daycare        Daycare     @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId      String
  name           String
  photoUrl       String?
  dob            DateTime @db.Date // Date of Birth
  startDate      DateTime @db.Date
  program        String // e.g., 'Infant (0-12months)'
  programType    String // e.g., 'Full time', 'Part time'
  status         ChildStatus @default(Waitlisted)
  motherName     String
  fatherName     String
  mobilePhone    String
  homePhone      String?
  address        String
  emergencyName  String
  emergencyPhone String
  vaccination    String?
  allergies      String?
  notes          String?

  // Relations
  attendance     AttendanceRecord[]
  assessments    Assessment[]
  invoices       Invoice[]
  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Daily attendance records for each child.
model AttendanceRecord {
  id        String   @id @default(cuid())
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId   String
  date      DateTime @db.Date
  status    String // e.g., "Present", "Absent", "On Leave"
  checkIn   DateTime?
  checkOut  DateTime?
  leaveReason String?
  leaveFrom   DateTime? @db.Date
  leaveTo     DateTime? @db.Date
  leaveType   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([childId, date])
}

// Daily planned activities for a daycare.
model Activity {
  id          String   @id @default(cuid())
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId   String
  date        DateTime @db.Date
  time        String // e.g., "10:00 AM"
  title       String
  category    String // e.g., "Art & Craft"
  description String?  @db.Text
  materials   String?  @db.Text
  domains     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// AI-generated performance assessments for each child.
model Assessment {
  id                      String   @id @default(cuid())
  child                   Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId                 String
  reportingPeriod         String
  observations            String   @db.Text
  socialEmotional         String   @db.Text
  cognitiveSkills         String   @db.Text
  languageCommunication   String   @db.Text
  motorSkills             String   @db.Text
  summaryRecommendations  String   @db.Text
  generatedAt             DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

// Invoices for child tuition and fees.
model Invoice {
  id      String        @id @default(cuid())
  child   Child         @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId String
  amount  Float
  dueDate DateTime      @db.Date
  status  InvoiceStatus @default(Due)
  program String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Operational expenses for a daycare.
model Expense {
  id          String   @id @default(cuid())
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId   String
  date        DateTime @db.Date
  category    String // e.g., 'Supplies', 'Utilities'
  description String
  amount      Float
  vendor      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Central document repository for a daycare.
model Document {
  id        String   @id @default(cuid())
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
  name      String
  type      String // e.g., 'PDF', 'Word'
  size      String // e.g., '1.2 MB'
  url       String
  dateAdded DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Photo gallery images for a daycare.
model GalleryPhoto {
  id        String   @id @default(cuid())
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
  url       String
  altText   String?
  dateAdded DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -- COMMUNICATION MODELS --

// Announcements broadcast to all parents of a daycare.
model Announcement {
  id        String   @id @default(cuid())
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId String
  title     String
  content   String   @db.Text
  date      DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Direct messages sent to a specific child's parents.
model DirectMessage {
  id      String   @id @default(cuid())
  child   Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId String
  content String   @db.Text
  sentAt  DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -- TEMPLATE MODELS (ADMIN-MANAGED) --

// Report templates created by SaaS Admins.
model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  content     String   @db.Text // Can store HTML or a JSON structure for the template
  isGlobal    Boolean  @default(false) // If true, available to all daycares

  assignments TemplateAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Join table for assigning specific templates to specific daycares.
model TemplateAssignment {
  template   ReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
  daycare    Daycare        @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  daycareId  String
  assignedAt DateTime       @default(now())

  @@id([templateId, daycareId])
}
