// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================================= //
//                 SAAS Admin Models                 //
// ================================================= //

model SaaSAdmin {
  id       String @id @default(cuid())
  email    String @unique
  password String // Hashed password
}

model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // A template can be assigned to multiple daycares via the join table
  assignments TemplateAssignment[]
}

// ================================================= //
//               Daycare-Specific Models             //
// ================================================= //

model Daycare {
  id            String   @id @default(cuid())
  name          String
  licenseNumber String?
  email         String   @unique
  phone         String?
  address       String?
  logoUrl       String?
  bannerUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Tenancy Control
  status DaycareStatus @default(PENDING)
  plan   BillingPlan   @default(BASIC)

  // Relationships
  children       Child[]
  staff          StaffMember[]
  invoices       Invoice[]
  expenses       Expense[]
  documents      Document[]
  galleryItems   GalleryPhoto[]
  activities     Activity[]
  attendance     AttendanceRecord[]
  communications Communication[]

  // Template assignments for this daycare via the join table
  templateAssignments TemplateAssignment[]
}

// Explicit join table for many-to-many relationship between ReportTemplate and Daycare
model TemplateAssignment {
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  templateId String
  template   ReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([daycareId, templateId])
}


model Child {
  id             String      @id @default(cuid())
  name           String
  dob            DateTime
  startDate      DateTime
  status         ChildStatus @default(ACTIVE)
  photoUrl       String?
  allergies      String?
  notes          String?
  vaccination    String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  program        Program
  programType    ProgramType

  motherName String
  fatherName String
  mobilePhone String
  address    String
  emergencyName String
  emergencyPhone String

  // Foreign Key to Daycare
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  // Relationships
  attendance AttendanceRecord[]
  assessments ChildAssessment[]
}

model StaffMember {
  id             String   @id @default(cuid())
  name           String
  role           StaffRole
  certifications String?
  status         StaffStatus @default(ACTIVE)
  startDate      DateTime
  phone          String
  address        String
  emergencyName  String
  emergencyPhone String
  payType        PayType
  payRate        Float
  notes          String?
  photoUrl       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Foreign Key to Daycare
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
}

model AttendanceRecord {
  id          String           @id @default(cuid())
  date        DateTime         @db.Date
  checkIn     DateTime?
  checkOut    DateTime?
  status      AttendanceStatus
  leaveReason String?
  leaveFrom   DateTime?
  leaveTo     DateTime?
  leaveType   LeaveType?

  // Foreign Key to Child
  childId String
  child   Child @relation(fields: [childId], references: [id], onDelete: Cascade)

  // Foreign Key to Daycare
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String           @id @default(cuid())
  date        DateTime
  time        String // Storing as string, could be DateTime as well
  title       String
  category    ActivityCategory
  description String?
  materials   String?
  domains     LearningDomain[]

  // Foreign Key to Daycare
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
}


model ChildAssessment {
  id                      String   @id @default(cuid())
  reportingPeriod         String
  observations            String
  socialEmotional         String
  cognitiveSkills         String
  languageCommunication   String
  motorSkills             String
  summaryRecommendations  String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Foreign Key to Child
  childId String
  child   Child @relation(fields: [childId], references: [id], onDelete: Cascade)
}

model Invoice {
  id        String        @id @default(cuid())
  amount    Float
  dueDate   DateTime
  status    InvoiceStatus
  program   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Foreign Key to Daycare
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String          @id @default(cuid())
  date        DateTime
  category    ExpenseCategory
  description String
  amount      Float
  vendor      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Foreign Key to Daycare
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
}

model Document {
  id        String   @id @default(cuid())
  name      String
  type      String // e.g., 'PDF', 'Word'
  size      String // e.g., '1.2 MB'
  url       String   // URL to the file in cloud storage
  dateAdded DateTime @default(now())

  // Foreign Key to Daycare
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
}

model GalleryPhoto {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  dateAdded DateTime @default(now())

  // Foreign Key to Daycare
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
}

model Communication {
  id        String            @id @default(cuid())
  type      CommunicationType // BROADCAST or DIRECT
  content   String
  createdAt DateTime          @default(now())
  
  // Foreign Key to Daycare
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
}


// ================================================= //
//                      Enums                        //
// ================================================= //

enum DaycareStatus {
  ACTIVE
  INACTIVE
  PENDING
  ARCHIVED
}

enum BillingPlan {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum ChildStatus {
  ACTIVE
  WAITLISTED
  INACTIVE
}

enum Program {
  INFANT
  TODDLER
  PRESCHOOL
  GRADESCHOOLER
}

enum ProgramType {
  FULL_TIME
  PART_TIME
  ADHOC
}

enum StaffStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum StaffRole {
  LEAD_ECE
  ASSISTANT
  ECE_IT
  SUPPORT_STAFF
}

enum PayType {
  MONTHLY_SALARY
  HOURLY_RATE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  ON_LEAVE
  PENDING
}

enum LeaveType {
  DAILY
  SHORT_TERM
  LONG_TERM
}

enum ActivityCategory {
  ART_AND_CRAFT
  MUSIC_AND_MOVEMENT
  OUTDOOR_PLAY
  STORY_TIME
  SCIENCE_AND_DISCOVERY
}

enum LearningDomain {
  COGNITIVE
  FINE_MOTOR
  GROSS_MOTOR
  SOCIAL_EMOTIONAL
  LANGUAGE
}

enum InvoiceStatus {
  PAID
  DUE
  OVERDUE
}

enum ExpenseCategory {
  SUPPLIES
  UTILITIES
  RENT
  SALARIES
  FOOD
  MAINTENANCE
  OTHER
}

enum CommunicationType {
  BROADCAST
  DIRECT
}
