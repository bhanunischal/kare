// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents a user who can log in. This could be an admin or a daycare owner.
model User {
  id    String   @id @default(cuid())
  email String   @unique
  name  String?

  // A user might own a daycare. The relationship is one-to-one.
  daycare Daycare?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// The main entity for a daycare center.
model Daycare {
  id      String   @id @default(cuid())
  name    String
  address String?
  phone   String?

  // Each Daycare must be owned by one User. This is the defining side of the one-to-one relation.
  // The `ownerId` field must be unique to enforce this.
  ownerId String  @unique
  owner   User    @relation(fields: [ownerId], references: [id])

  // A daycare has many children and staff members.
  children Child[]
  staff    Staff[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents a child enrolled in a daycare.
model Child {
  id        String   @id @default(cuid())
  name      String
  dob       DateTime
  status    String   @default("Active") // e.g., Active, Inactive, Waitlisted

  // The child belongs to one daycare.
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  // For simplicity, parent info is stored as simple fields for now.
  parentName  String
  parentPhone String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents a staff member at a daycare.
model Staff {
  id    String @id @default(cuid())
  name  String
  role  String // e.g., "Lead ECE", "Assistant"
  phone String?

  // The staff member belongs to one daycare.
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
