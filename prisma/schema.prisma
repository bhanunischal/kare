// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================= //
//         SaaS Admin Models         //
// ================================= //

model SaaSAdmin {
  id       String @id @default(cuid())
  email    String @unique
  password String // Hashed password
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ================================= //
//         Core Tenancy Models       //
// ================================= //

model Daycare {
  id           String  @id @default(cuid())
  name         String
  licenseNumber String?
  email        String  @unique
  password     String  // Hashed password
  phone        String?
  address      String?
  logoUrl      String?
  bannerUrl    String?

  status DaycareStatus @default(PENDING)
  plan   BillingPlan   @default(BASIC)

  children   Child[]
  staff      StaffMember[]
  invoices   Invoice[]
  expenses   Expense[]
  activities Activity[]
  documents  Document[]
  gallery    GalleryItem[]
  
  // Explicit many-to-many relationship with ReportTemplate
  templateAssignments TemplateAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String // Storing as a JSON string for simplicity and compatibility

  // Explicit many-to-many relationship with Daycare
  assignedDaycares TemplateAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Explicit join table for ReportTemplate and Daycare
model TemplateAssignment {
  templateId String
  daycareId  String
  
  template ReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  daycare  Daycare        @relation(fields: [daycareId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())
  
  @@id([templateId, daycareId])
}


// ================================= //
//       Daycare-Specific Models     //
// ================================= //

model Child {
  id        String      @id @default(cuid())
  daycareId String
  daycare   Daycare     @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  name        String
  photoUrl    String?
  dob         DateTime
  startDate   DateTime
  
  program     ProgramGroup
  programType ProgramType
  status      ChildStatus

  motherName String
  fatherName String

  homePhone   String?
  mobilePhone String
  address     String

  emergencyName   String
  emergencyPhone  String

  vaccinationInfo String?
  allergies       String?
  notes           String?

  attendanceRecords AttendanceRecord[]
  assessments       Assessment[]
  invoices          Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffMember {
  id        String  @id @default(cuid())
  daycareId String
  daycare   Daycare @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  name      String
  photoUrl  String?
  role      StaffRole
  status    StaffStatus

  certifications String?
  startDate      DateTime
  
  phone   String
  address String

  emergencyName  String
  emergencyPhone String

  payType PayType
  payRate Float

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendanceRecord {
  id        String   @id @default(cuid())
  childId   String
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id]) // No cascade here to avoid cycles

  date     DateTime
  checkIn  DateTime?
  checkOut DateTime?
  status   AttendanceStatus
  
  leaveReason String?
  leaveFrom   DateTime?
  leaveTo     DateTime?
  leaveType   LeaveType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  daycareId   String
  daycare     Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  date        DateTime
  time        String // Storing time as string e.g., "10:00 AM" might be better as DateTime if timezone matters
  title       String
  category    ActivityCategory
  description String?
  materials   String?
  domains     String? // Storing as a comma-separated string for simplicity and compatibility

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assessment {
  id              String   @id @default(cuid())
  childId         String
  child           Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  daycareId       String
  daycare         Daycare  @relation(fields: [daycareId], references: [id]) // No cascade here to avoid cycles
  
  reportingPeriod String
  observations    String

  // AI Generated fields
  socialEmotional      String
  cognitiveSkills      String
  languageCommunication String
  motorSkills          String
  summaryRecommendations String

  generatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invoice {
  id        String        @id @default(cuid())
  childId   String
  child     Child         @relation(fields: [childId], references: [id], onDelete: Cascade)
  daycareId String
  daycare   Daycare       @relation(fields: [daycareId], references: [id]) // No cascade here to avoid cycles
  
  amount  Float
  dueDate DateTime
  status  InvoiceStatus
  program ProgramGroup

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id          String         @id @default(cuid())
  daycareId   String
  daycare     Daycare        @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  date        DateTime
  category    ExpenseCategory
  description String
  amount      Float
  vendor      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id        String   @id @default(cuid())
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  name      String
  url       String // URL to the file in cloud storage
  type      String // e.g., 'PDF', 'Word', 'Image'
  size      Float // in KB
  
  uploadedAt DateTime @default(now())
}

model GalleryItem {
  id        String   @id @default(cuid())
  daycareId String
  daycare   Daycare  @relation(fields: [daycareId], references: [id], onDelete: Cascade)
  
  url       String
  altText   String?
  
  uploadedAt DateTime @default(now())
}


// ================================= //
//               Enums               //
// ================================= //

enum DaycareStatus {
  ACTIVE
  INACTIVE
  PENDING
  ARCHIVED
}

enum BillingPlan {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum ChildStatus {
  ACTIVE
  WAITLISTED
  INACTIVE
}

enum StaffStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  ON_LEAVE
  PENDING
}

enum LeaveType {
  DAILY
  SHORT_TERM
  LONG_TERM
}

enum InvoiceStatus {
  PAID
  DUE
  OVERDUE
}

enum ProgramGroup {
  INFANT
  TODDLER
  PRESCHOOL
  GRADESCHOOLER
}

enum ProgramType {
  FULL_TIME
  PART_TIME
  ADHOC
}

enum StaffRole {
  LEAD_ECE
  ASSISTANT
  ECE_IT
  SUPPORT_STAFF
}

enum PayType {
  MONTHLY_SALARY
  HOURLY_RATE
}

enum ExpenseCategory {
  SUPPLIES
  UTILITIES
  RENT
  SALARIES
  FOOD
  MAINTENANCE
  OTHER
}

enum ActivityCategory {
  ART_CRAFT
  MUSIC_MOVEMENT
  OUTDOOR_PLAY
  STORY_TIME
  SCIENCE_DISCOVERY
}
